#### Labels
#0x0000          = 0x0000
fn_execute       = 0x807C
fn_ping          = 0x801F
fn_read          = 0x8040
fn_read_port     = 0x8028
fn_write         = 0x805E
fn_write_port    = 0x8034
getChar          = 0x8096
getChar_wait     = 0x8096
initSerial       = 0x8087
initWait1        = 0x808D
initWait2        = 0x8093
main_loop        = 0x8003
ping_string      = 0x8085
read_loop        = 0x8050
sendChar         = 0x809F
sendChar_wait    = 0x80A0
sendStr          = 0x80AB
sendStr_out      = 0x80B6
write_loop       = 0x806E

#### Defines
SER_CR           = 0x0080
SER_CR_7E1       = 0x0008
SER_CR_7E2       = 0x0000
SER_CR_7O1       = 0x000C
SER_CR_7O2       = 0x0004
SER_CR_8E1       = 0x0018
SER_CR_8N1       = 0x0014
SER_CR_8N2       = 0x0010
SER_CR_8O2       = 0x001C
SER_CR_BY_1      = 0x0000
SER_CR_BY_16     = 0x0001
SER_CR_BY_64     = 0x0002
SER_CR_RESET     = 0x0003
SER_CR_RTShigh_TXIoff = 0x0002
SER_CR_RTSlow_TXIoff = 0x0000
SER_CR_RTSlow_TXIoff_BRK = 0x0003
SER_CR_RTSlow_TXIon = 0x0001
SER_CR_RXI_Enable = 0x0080
SER_RX           = 0x0081
SER_SR           = 0x0080
SER_SR_CTS       = 0x0008
SER_SR_DCD       = 0x0004
SER_SR_FE        = 0x0010
SER_SR_IRQ       = 0x0080
SER_SR_OVRN      = 0x0020
SER_SR_PE        = 0x0040
SER_SR_RDFR      = 0x0001
SER_SR_TDRE      = 0x0002
SER_TX           = 0x0081
_CPU             = Z80
input_buffer     = 0x9000

                  ; -------------------------------------------------------------
                  
                  ; Two-byte values in MSB-first
                  
                  ; 0        - Responds with "I am here" string
                  ; 1aaLL    - Read LL bytes beginning at aa
                  ; 2aaLL... - Write LL byte beginning at aa
                  ; 3p       - Read the port p
                  ; 4pV      - Write the value V to port p
                  ; 5aa      - Execute address aa
                  
                  ._CPU = Z80
                  
                  ; http://www.vcfed.org/forum/archive/index.php/t-52356.html
                  
                  ; The master reset (CR0, CR1) must be set immediately after powerup.
                  ; CR5 and CR6 should be programmed to define the state of RTS when later master resets are given
                  
                  ;  CS0 -> M1
                  ;  CS1 -> A7
                  ; -CS2 -> A6
                  ;  RS  -> A0
                  
                  ; 10xxxxxx
                  
                  .SER_CR = 0x80 ; Write
                  ; 7 - CR7 Receive Interrupt Enable
                  ; 6 - CR6   +-- Transmitter Control Bits
                  ; 5 - CR5   +   00=RTSlow_TXIoff, 01=RTSlow_TXIon, 10=RTShigh_TXIoff, 11=RTSlow_TXIoff_BRK
                  ; 4 - CR4     +
                  ; 3 - CR3     +-- Word select : 000=7E2, 001=7O2, 010=7E1, 011=7O1
                  ; 2 - CR2     +                 100=8N2, 101=8N1, 110=8E1, 111=8O1
                  ; 1 - CR1       +-- Counter divide
                  ; 0 - CR0       +   00=By1, 01=By16, 10=By64, 11=MasterReset
                  .SER_CR_BY_1  = 0b0_00_000_00
                  .SER_CR_BY_16 = 0b0_00_000_01
                  .SER_CR_BY_64 = 0b0_00_000_10 ; Use this for RC2014 board
                  .SER_CR_RESET = 0b0_00_000_11
                  ;
                  .SER_CR_7E2 = 0b0_00_000_00
                  .SER_CR_7O2 = 0b0_00_001_00
                  .SER_CR_7E1 = 0b0_00_010_00
                  .SER_CR_7O1 = 0b0_00_011_00
                  .SER_CR_8N2 = 0b0_00_100_00
                  .SER_CR_8N1 = 0b0_00_101_00
                  .SER_CR_8E1 = 0b0_00_110_00
                  .SER_CR_8O2 = 0b0_00_111_00
                  ;
                  .SER_CR_RTSlow_TXIoff     = 0b0_00_000_00
                  .SER_CR_RTSlow_TXIon      = 0b0_00_000_01
                  .SER_CR_RTShigh_TXIoff    = 0b0_00_000_10
                  .SER_CR_RTSlow_TXIoff_BRK = 0b0_00_000_11
                  ;
                  .SER_CR_RXI_Enable = 0b1_00_000_00
                  
                  .SER_SR = 0x80 ; Read
                  ;  7 - IRQ  State of IRQ output (1 if interrupt is triggered). Clear by reading RX or writing TX.
                  ;  6 - PE   Parity Error flag
                  ;  5 - OVRN Receiver Overrun error flag
                  ;  4 - FE   Framing Error
                  ;  3 - CTS  Clear to Send
                  ;  2 - DCD  Data Carrier Detect
                  ;  1 - TDRE Transmit Data Register Empty
                  ;  0 - RDFR Receive Data Register Full
                  .SER_SR_RDFR = 0b00000001
                  .SER_SR_TDRE = 0b00000010
                  .SER_SR_DCD  = 0b00000100
                  .SER_SR_CTS  = 0b00001000
                  .SER_SR_FE   = 0b00010000
                  .SER_SR_OVRN = 0b00100000
                  .SER_SR_PE   = 0b01000000
                  .SER_SR_IRQ  = 0b10000000
                  
                  ; TX/RX data
                  
                  .SER_TX = 0x81 ; Write
                  .SER_RX = 0x81 ; Read
                  
                  .input_buffer = 0x9000 ; 0x9100
                  
                  #0x0000: ; ROM
                  0x8000:  ; RAM
                  
8000: 31 00 00         LD  SP,0  ; First on stack at FFFE,FFFF
                  
                  main_loop:
                  
8003: CD 96 80         CALL  getChar
                  
8006: FE 01            CP    1
8008: CA 40 80         JP    Z,fn_read
800B: FE 02            CP    2
800D: CA 5E 80         JP    Z,fn_write
8010: FE 03            CP    3
8012: CA 28 80         JP    Z,fn_read_port
8015: FE 04            CP    4
8017: CA 34 80         JP    Z,fn_write_port
801A: FE 05            CP    5
801C: CA 7C 80         JP    Z,fn_execute
                  
                  fn_ping:
801F: 21 85 80         LD    HL,ping_string
8022: CD AB 80         CALL  sendStr
8025: C3 03 80         JP    main_loop
                  
                  fn_read_port:
8028: CD 96 80         CALL      getChar       ; Port
802B: 4F               LD        C,A
802C: ED 78            IN        A,(C)
802E: CD 9F 80         CALL      sendChar
8031: C3 03 80         JP        main_loop
                  
                  fn_write_port:
8034: CD 96 80         CALL      getChar       ; Port
8037: 4F               LD        C,A
8038: CD 96 80         CALL      getChar
803B: ED 79            OUT       (C),A
803D: C3 03 80         JP        main_loop
                  
                  fn_read:
8040: CD 96 80         CALL      getChar       ; Destination
8043: 67               LD        H,A
8044: CD 96 80         CALL      getChar
8047: 6F               LD        L,A
8048: CD 96 80         CALL      getChar       ; Length
804B: 57               LD        D,A
804C: CD 96 80         CALL      getChar
804F: 5F               LD        E,A
                  read_loop:
8050: 7E               LD        A,(HL)        ; Read from memory
8051: CD 9F 80         CALL      sendChar      ; Write to serial
8054: 23               INC       HL            ; Bump the destination pointer
8055: 1B               DEC       DE            ; Decrement the length
8056: 7A               LD        A,D           ; All ...
8057: B3               OR        E             ; ... done?
8058: C2 50 80         JP        NZ,read_loop  ; No ... still more to do
805B: C3 03 80         JP        main_loop
                  
                  fn_write:
805E: CD 96 80         CALL      getChar       ; Destination
8061: 67               LD        H,A
8062: CD 96 80         CALL      getChar
8065: 6F               LD        L,A
8066: CD 96 80         CALL      getChar       ; Length
8069: 57               LD        D,A
806A: CD 96 80         CALL      getChar
806D: 5F               LD        E,A
                  write_loop:
806E: CD 96 80         CALL      getChar       ; Get byte
8071: 77               LD        (HL),A        ; Store it to RAM
8072: 23               INC       HL            ; Bump the destination pointer
8073: 1B               DEC       DE            ; Decrement the length
8074: 7A               LD        A,D           ; All ...
8075: B3               OR        E             ; ... loaded?
8076: C2 6E 80         JP        NZ,write_loop ; No ... still more to do
8079: C3 03 80         JP        main_loop
                  
                  fn_execute:
807C: CD 96 80         CALL      getChar       ; Destination
807F: 67               LD        H,A
8080: CD 96 80         CALL      getChar
8083: 6F               LD        L,A
8084: E9               JP        (HL)
                  
                  ping_string:
