#### Labels
#0x8000          = 0x0000
fn_execute       = 0x0084
fn_ping          = 0x0022
fn_read          = 0x0048
fn_read_port     = 0x0030
fn_write         = 0x0066
fn_write_port    = 0x003C
getChar          = 0x00A1
getChar_wait     = 0x00A1
initSerial       = 0x0092
initWait1        = 0x0098
initWait2        = 0x009E
main_loop        = 0x0006
ping_string      = 0x008D
read_loop        = 0x0058
sendChar         = 0x00AA
sendChar_wait    = 0x00AB
sendStr          = 0x00B6
sendStr_out      = 0x00C3
write_loop       = 0x0076

#### Defines
SER_CR           = 0x0080
SER_CR_7E1       = 0x0008
SER_CR_7E2       = 0x0000
SER_CR_7O1       = 0x000C
SER_CR_7O2       = 0x0004
SER_CR_8E1       = 0x0018
SER_CR_8N1       = 0x0014
SER_CR_8N2       = 0x0010
SER_CR_8O2       = 0x001C
SER_CR_BY_1      = 0x0000
SER_CR_BY_16     = 0x0001
SER_CR_BY_64     = 0x0002
SER_CR_RESET     = 0x0003
SER_CR_RTShigh_TXIoff = 0x0002
SER_CR_RTSlow_TXIoff = 0x0000
SER_CR_RTSlow_TXIoff_BRK = 0x0003
SER_CR_RTSlow_TXIon = 0x0001
SER_CR_RXI_Enable = 0x0080
SER_RX           = 0x0081
SER_SR           = 0x0080
SER_SR_CTS       = 0x0008
SER_SR_DCD       = 0x0004
SER_SR_FE        = 0x0010
SER_SR_IRQ       = 0x0080
SER_SR_OVRN      = 0x0020
SER_SR_PE        = 0x0040
SER_SR_RDFR      = 0x0001
SER_SR_TDRE      = 0x0002
SER_TX           = 0x0081
_CPU             = Z80

                  ; -------------------------------------------------------------------
                  ; This is a binary serial service to be used by a monitor
                  ; written in, say, python. All of the GUI functions and input
                  ; management are handled by the monitor program on the PC.
                  ;
                  ; All we do here is respond to requests from that program.
                  ;
                  ; Two-byte values in MSB-first
                  ;
                  ; 1aaLL    - Read LL bytes beginning at aa
                  ; 2aaLL... - Write LL byte beginning at aa
                  ; 3p       - Read the port p
                  ; 4pV      - Write the value V to port p
                  ; 5aa      - Execute address aa
                  ;
                  ; Anything else: responds with ascii version string (null terminated)
                  ; -------------------------------------------------------------------
                  
                  ._CPU = Z80
                  
                  ; http://www.vcfed.org/forum/archive/index.php/t-52356.html
                  
                  ; The master reset (CR0, CR1) must be set immediately after powerup.
                  ; CR5 and CR6 should be programmed to define the state of RTS when later master resets are given
                  
                  ;  CS0 -> M1
                  ;  CS1 -> A7
                  ; -CS2 -> A6
                  ;  RS  -> A0
                  
                  ; 10xxxxxx
                  
                  .SER_CR = 0x80 ; Write
                  ; 7 - CR7 Receive Interrupt Enable
                  ; 6 - CR6   +-- Transmitter Control Bits
                  ; 5 - CR5   +   00=RTSlow_TXIoff, 01=RTSlow_TXIon, 10=RTShigh_TXIoff, 11=RTSlow_TXIoff_BRK
                  ; 4 - CR4     +
                  ; 3 - CR3     +-- Word select : 000=7E2, 001=7O2, 010=7E1, 011=7O1
                  ; 2 - CR2     +                 100=8N2, 101=8N1, 110=8E1, 111=8O1
                  ; 1 - CR1       +-- Counter divide
                  ; 0 - CR0       +   00=By1, 01=By16, 10=By64, 11=MasterReset
                  .SER_CR_BY_1  = 0b0_00_000_00
                  .SER_CR_BY_16 = 0b0_00_000_01
                  .SER_CR_BY_64 = 0b0_00_000_10 ; Use this for RC2014 board
                  .SER_CR_RESET = 0b0_00_000_11
                  ;
                  .SER_CR_7E2 = 0b0_00_000_00
                  .SER_CR_7O2 = 0b0_00_001_00
                  .SER_CR_7E1 = 0b0_00_010_00
                  .SER_CR_7O1 = 0b0_00_011_00
                  .SER_CR_8N2 = 0b0_00_100_00
                  .SER_CR_8N1 = 0b0_00_101_00
                  .SER_CR_8E1 = 0b0_00_110_00
                  .SER_CR_8O2 = 0b0_00_111_00
                  ;
                  .SER_CR_RTSlow_TXIoff     = 0b0_00_000_00
                  .SER_CR_RTSlow_TXIon      = 0b0_00_000_01
                  .SER_CR_RTShigh_TXIoff    = 0b0_00_000_10
                  .SER_CR_RTSlow_TXIoff_BRK = 0b0_00_000_11
                  ;
                  .SER_CR_RXI_Enable = 0b1_00_000_00
                  
                  .SER_SR = 0x80 ; Read
                  ;  7 - IRQ  State of IRQ output (1 if interrupt is triggered). Clear by reading RX or writing TX.
                  ;  6 - PE   Parity Error flag
                  ;  5 - OVRN Receiver Overrun error flag
                  ;  4 - FE   Framing Error
                  ;  3 - CTS  Clear to Send
                  ;  2 - DCD  Data Carrier Detect
                  ;  1 - TDRE Transmit Data Register Empty
                  ;  0 - RDFR Receive Data Register Full
                  .SER_SR_RDFR = 0b00000001
                  .SER_SR_TDRE = 0b00000010
                  .SER_SR_DCD  = 0b00000100
                  .SER_SR_CTS  = 0b00001000
                  .SER_SR_FE   = 0b00010000
                  .SER_SR_OVRN = 0b00100000
                  .SER_SR_PE   = 0b01000000
                  .SER_SR_IRQ  = 0b10000000
                  
                  ; TX/RX data
                  
                  .SER_TX = 0x81 ; Write
                  .SER_RX = 0x81 ; Read
                  
                  0x0000: ; ROM
                  #0x8000:  ; RAM
                  
0000: 31 00 00         LD    SP,0         ; First on stack at FFFE,FFFF
0003: CD 92 00         CALL  initSerial
                  
                  main_loop:
                  
0006: CD A1 00         CALL  getChar
                  
0009: FE 01            CP    1
000B: CA 48 00         JP    Z,fn_read
                  
000E: FE 02            CP    2
0010: CA 66 00         JP    Z,fn_write
                  
0013: FE 03            CP    3
0015: CA 30 00         JP    Z,fn_read_port
                  
0018: FE 04            CP    4
001A: CA 3C 00         JP    Z,fn_write_port
                  
001D: FE 05            CP    5
001F: CA 84 00         JP    Z,fn_execute
                  
                  fn_ping:
0022: 21 8D 00         LD    HL,ping_string
0025: CD B6 00         CALL  sendStr
0028: 3E 00            LD    A,0
002A: CD AA 00         CALL  sendChar
002D: C3 06 00         JP    main_loop
                  
                  fn_read_port:
0030: CD A1 00         CALL      getChar       ; Port
0033: 4F               LD        C,A
0034: ED 78            IN        A,(C)
0036: CD AA 00         CALL      sendChar
0039: C3 06 00         JP        main_loop
                  
                  fn_write_port:
003C: CD A1 00         CALL      getChar       ; Port
003F: 4F               LD        C,A
0040: CD A1 00         CALL      getChar
0043: ED 79            OUT       (C),A
0045: C3 06 00         JP        main_loop
                  
                  fn_read:
0048: CD A1 00         CALL      getChar       ; Destination
004B: 67               LD        H,A
004C: CD A1 00         CALL      getChar
004F: 6F               LD        L,A
0050: CD A1 00         CALL      getChar       ; Length
0053: 57               LD        D,A
0054: CD A1 00         CALL      getChar
0057: 5F               LD        E,A
                  read_loop:
0058: 7E               LD        A,(HL)        ; Read from memory
0059: CD AA 00         CALL      sendChar      ; Write to serial
005C: 23               INC       HL            ; Bump the destination pointer
005D: 1B               DEC       DE            ; Decrement the length
005E: 7A               LD        A,D           ; All ...
005F: B3               OR        E             ; ... done?
0060: C2 58 00         JP        NZ,read_loop  ; No ... still more to do
0063: C3 06 00         JP        main_loop
                  
                  fn_write:
0066: CD A1 00         CALL      getChar       ; Destination
0069: 67               LD        H,A
006A: CD A1 00         CALL      getChar
006D: 6F               LD        L,A
006E: CD A1 00         CALL      getChar       ; Length
0071: 57               LD        D,A
0072: CD A1 00         CALL      getChar
0075: 5F               LD        E,A
                  write_loop:
0076: CD A1 00         CALL      getChar       ; Get byte
0079: 77               LD        (HL),A        ; Store it to RAM
007A: 23               INC       HL            ; Bump the destination pointer
007B: 1B               DEC       DE            ; Decrement the length
007C: 7A               LD        A,D           ; All ...
007D: B3               OR        E             ; ... loaded?
007E: C2 76 00         JP        NZ,write_loop ; No ... still more to do
0081: C3 06 00         JP        main_loop
                  
                  fn_execute:
0084: CD A1 00         CALL      getChar       ; Destination
0087: 67               LD        H,A
0088: CD A1 00         CALL      getChar
008B: 6F               LD        L,A
008C: E9               JP        (HL)          ; Jump to the destination
                  
                  ping_string:
008D: 56 32 2E 30 00   .   "V2.0", 0
                  
                  ; Needs serial.asm
                  
                  initSerial:
0092: 3E 03            LD        A,SER_CR_RESET               ; Master reset ...
0094: D3 80            OUT       (SER_CR),A                   ; ... the 6850
0096: 06 00            LD        B,0                          ; (Delay may not be needed)
                  initWait1:
0098: 10 FE            DJNZ      initWait1                    ; Short delay (may not be needed)
009A: 3E 16            LD        A,SER_CR_BY_64 | SER_CR_8N1  ; 8N1 at 115200
009C: D3 80            OUT       (SER_CR),A                   ; Set the serial protocol
                  initWait2:
009E: 10 FE            DJNZ      initWait2                    ; Short delay (may not be needed)
00A0: C9               RET
                  
                  getChar:
                  ; Wait for a character from the input.
                  ; Return it in A
                  getChar_wait:
00A1: DB 80            IN        A,(SER_CR)      ; Data ready ...
00A3: E6 01            AND       SER_SR_RDFR     ; ... to be read?
00A5: 28 FA            JR        Z,getChar_wait  ; 0=No ... wait for data
00A7: DB 81            IN        A,(SER_RX)      ; Read the data
00A9: C9               RET
                  
                  sendChar:
                  ; Wait for buffer to clear.
                  ; Send character in A
00AA: 47               LD        B,A             ; We need A for I/O
                  sendChar_wait:
00AB: DB 80            IN        A,(SER_CR)      ; Buffer is ready ...
00AD: E6 02            AND       SER_SR_TDRE     ; ... for new data?
00AF: CA AB 00         JP        Z,sendChar_wait ; 0=No ... wait for ready
00B2: 78               LD        A,B             ; Back to A for I/O
00B3: D3 81            OUT       (SER_TX),A      ; Write the data
00B5: C9               RET
                  
                  sendStr:
                  ; Send a string of characters pointed to by HL
                  ; (null terminated)
00B6: 7E               LD        A,(HL)          ; Next character
00B7: FE 00            CP        0
00B9: CA C3 00         JP        Z,sendStr_out   ; 0 means We are done
00BC: 23               INC       HL              ; Bump pointer
00BD: CD AA 00         CALL      sendChar        ; Write the character
00C0: C3 B6 00         JP        sendStr         ; Keep printing
                  sendStr_out:
00C3: C9               RET
