#### Labels
getChar          = 0x0032
getChar_wait     = 0x0032
initSerial       = 0x0023
initWait1        = 0x0029
initWait2        = 0x002F
loadLoop         = 0x0017
sendChar         = 0x003B
sendChar_wait    = 0x003C

#### Defines
SER_CR           = 0x0080
SER_CR_7E1       = 0x0008
SER_CR_7E2       = 0x0000
SER_CR_7O1       = 0x000C
SER_CR_7O2       = 0x0004
SER_CR_8E1       = 0x0018
SER_CR_8N1       = 0x0014
SER_CR_8N2       = 0x0010
SER_CR_8O2       = 0x001C
SER_CR_BY_1      = 0x0000
SER_CR_BY_16     = 0x0001
SER_CR_BY_64     = 0x0002
SER_CR_RESET     = 0x0003
SER_CR_RTShigh_TXIoff = 0x0002
SER_CR_RTSlow_TXIoff = 0x0000
SER_CR_RTSlow_TXIoff_BRK = 0x0003
SER_CR_RTSlow_TXIon = 0x0001
SER_CR_RXI_Enable = 0x0080
SER_RX           = 0x0081
SER_SR           = 0x0080
SER_SR_CTS       = 0x0008
SER_SR_DCD       = 0x0004
SER_SR_FE        = 0x0010
SER_SR_IRQ       = 0x0080
SER_SR_OVRN      = 0x0020
SER_SR_PE        = 0x0040
SER_SR_RDFR      = 0x0001
SER_SR_TDRE      = 0x0002
SER_TX           = 0x0081
_CPU             = Z80

                  ._CPU = Z80
                  
                  ; http://www.vcfed.org/forum/archive/index.php/t-52356.html
                  
                  ; The master reset (CR0, CR1) must be set immediately after powerup.
                  ; CR5 and CR6 should be programmed to define the state of RTS when later master resets are given
                  
                  ;  CS0 -> M1
                  ;  CS1 -> A7
                  ; -CS2 -> A6
                  ;  RS  -> A0
                  
                  ; 10xxxxxx
                  
                  .SER_CR = 0x80 ; Write
                  ; 7 - CR7 Receive Interrupt Enable
                  ; 6 - CR6   +-- Transmitter Control Bits
                  ; 5 - CR5   +   00=RTSlow_TXIoff, 01=RTSlow_TXIon, 10=RTShigh_TXIoff, 11=RTSlow_TXIoff_BRK
                  ; 4 - CR4     +
                  ; 3 - CR3     +-- Word select : 000=7E2, 001=7O2, 010=7E1, 011=7O1
                  ; 2 - CR2     +                 100=8N2, 101=8N1, 110=8E1, 111=8O1
                  ; 1 - CR1       +-- Counter divide
                  ; 0 - CR0       +   00=By1, 01=By16, 10=By64, 11=MasterReset
                  .SER_CR_BY_1  = 0b0_00_000_00
                  .SER_CR_BY_16 = 0b0_00_000_01
                  .SER_CR_BY_64 = 0b0_00_000_10 ; Use this for RC2014 board
                  .SER_CR_RESET = 0b0_00_000_11
                  ;
                  .SER_CR_7E2 = 0b0_00_000_00
                  .SER_CR_7O2 = 0b0_00_001_00
                  .SER_CR_7E1 = 0b0_00_010_00
                  .SER_CR_7O1 = 0b0_00_011_00
                  .SER_CR_8N2 = 0b0_00_100_00
                  .SER_CR_8N1 = 0b0_00_101_00
                  .SER_CR_8E1 = 0b0_00_110_00
                  .SER_CR_8O2 = 0b0_00_111_00
                  ;
                  .SER_CR_RTSlow_TXIoff     = 0b0_00_000_00
                  .SER_CR_RTSlow_TXIon      = 0b0_00_000_01
                  .SER_CR_RTShigh_TXIoff    = 0b0_00_000_10
                  .SER_CR_RTSlow_TXIoff_BRK = 0b0_00_000_11
                  ;
                  .SER_CR_RXI_Enable = 0b1_00_000_00
                  
                  .SER_SR = 0x80 ; Read
                  ;  7 - IRQ  State of IRQ output (1 if interrupt is triggered). Clear by reading RX or writing TX.
                  ;  6 - PE   Parity Error flag
                  ;  5 - OVRN Receiver Overrun error flag
                  ;  4 - FE   Framing Error
                  ;  3 - CTS  Clear to Send
                  ;  2 - DCD  Data Carrier Detect
                  ;  1 - TDRE Transmit Data Register Empty
                  ;  0 - RDFR Receive Data Register Full
                  .SER_SR_RDFR = 0b00000001
                  .SER_SR_TDRE = 0b00000010
                  .SER_SR_DCD  = 0b00000100
                  .SER_SR_CTS  = 0b00001000
                  .SER_SR_FE   = 0b00010000
                  .SER_SR_OVRN = 0b00100000
                  .SER_SR_PE   = 0b01000000
                  .SER_SR_IRQ  = 0b10000000
                  
                  ; TX/RX data
                  
                  .SER_TX = 0x81 ; Write
                  .SER_RX = 0x81 ; Read
                  
                  ; aaLL....
                  ;
                  ; aa   = address (2 byte big endian)
                  ; LL   = length (2 byte big endian)
                  ; .... = data one byte at a time;
                  ; Program is then execute at aa
                  
                  0x0000:
0000: 31 00 00         LD        SP,0         ; First on stack is at FFFE,FFFF
                  
0003: CD 23 00         CALL      initSerial   ; Prepare the serial communication
                  
0006: CD 32 00         CALL      getChar      ; Destination
0009: 67               LD        H,A
000A: CD 32 00         CALL      getChar
000D: 6F               LD        L,A
                  
000E: CD 32 00         CALL      getChar      ; Length
0011: 57               LD        D,A
0012: CD 32 00         CALL      getChar
0015: 5F               LD        E,A
                  
0016: E5               PUSH      HL           ; We'll RET after loading to jump to this address
                  
                  loadLoop:
0017: CD 32 00         CALL      getChar      ; Get byte
001A: 77               LD        (HL),A       ; Store it to RAM
001B: 23               INC       HL           ; Bump the destination pointer
001C: 1B               DEC       DE           ; Decrement the length
001D: 7A               LD        A,D          ; All ...
001E: B3               OR        E            ; ... loaded?
001F: C2 17 00         JP        NZ,loadLoop  ; No ... still more to do
                  
0022: C9               RET                    ; Jump to the loaded code
                  
                  ; Needs serial.asm
                  
                  initSerial:
0023: 3E 03            LD        A,SER_CR_RESET               ; Master reset ...
0025: D3 80            OUT       (SER_CR),A                   ; ... the 6850
0027: 06 00            LD        B,0                          ; (Delay may not be needed)
                  initWait1:
0029: 10 FE            DJNZ      initWait1                    ; Short delay (may not be needed)
002B: 3E 16            LD        A,SER_CR_BY_64 | SER_CR_8N1  ; 8N1 at 115200
002D: D3 80            OUT       (SER_CR),A                   ; Set the serial protocol
                  initWait2:
002F: 10 FE            DJNZ      initWait2                    ; Short delay (may not be needed)
0031: C9               RET
                  
                  getChar:
                  ; Wait for a character from the input.
                  ; Return it in A
                  getChar_wait:
0032: DB 80            IN        A,(SER_CR)      ; Data ready ...
0034: E6 01            AND       SER_SR_RDFR     ; ... to be read?
0036: 28 FA            JR        Z,getChar_wait  ; 0=No ... wait for data
0038: DB 81            IN        A,(SER_RX)      ; Read the data
003A: C9               RET
                  
                  sendChar:
                  ; Wait for buffer to clear.
                  ; Send character in A
003B: 47               LD        B,A             ; We need A for I/O
                  sendChar_wait:
003C: DB 80            IN        A,(SER_CR)      ; Buffer is ready ...
003E: E6 02            AND       SER_SR_TDRE     ; ... for new data?
0040: CA 3C 00         JP        Z,sendChar_wait ; 0=No ... wait for ready
0043: 78               LD        A,B             ; Back to A for I/O
0044: D3 81            OUT       (SER_TX),A      ; Write the data
0046: C9               RET
